// Generated by view binder compiler. Do not edit!
package com.example.kachate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.canhub.cropper.CropImageView;
import com.example.kachate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityImageSelectionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnCrop;

  @NonNull
  public final Button btnRotate;

  @NonNull
  public final ConstraintLayout buttonContainer;

  @NonNull
  public final CropImageView cropImageView;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final ScrollView resultContainer;

  @NonNull
  public final TextView resultTextView;

  private ActivityImageSelectionBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnCrop,
      @NonNull Button btnRotate, @NonNull ConstraintLayout buttonContainer,
      @NonNull CropImageView cropImageView, @NonNull ProgressBar progressBar,
      @NonNull ScrollView resultContainer, @NonNull TextView resultTextView) {
    this.rootView = rootView;
    this.btnCrop = btnCrop;
    this.btnRotate = btnRotate;
    this.buttonContainer = buttonContainer;
    this.cropImageView = cropImageView;
    this.progressBar = progressBar;
    this.resultContainer = resultContainer;
    this.resultTextView = resultTextView;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityImageSelectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityImageSelectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_image_selection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityImageSelectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCrop;
      Button btnCrop = ViewBindings.findChildViewById(rootView, id);
      if (btnCrop == null) {
        break missingId;
      }

      id = R.id.btnRotate;
      Button btnRotate = ViewBindings.findChildViewById(rootView, id);
      if (btnRotate == null) {
        break missingId;
      }

      id = R.id.buttonContainer;
      ConstraintLayout buttonContainer = ViewBindings.findChildViewById(rootView, id);
      if (buttonContainer == null) {
        break missingId;
      }

      id = R.id.cropImageView;
      CropImageView cropImageView = ViewBindings.findChildViewById(rootView, id);
      if (cropImageView == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.resultContainer;
      ScrollView resultContainer = ViewBindings.findChildViewById(rootView, id);
      if (resultContainer == null) {
        break missingId;
      }

      id = R.id.resultTextView;
      TextView resultTextView = ViewBindings.findChildViewById(rootView, id);
      if (resultTextView == null) {
        break missingId;
      }

      return new ActivityImageSelectionBinding((ConstraintLayout) rootView, btnCrop, btnRotate,
          buttonContainer, cropImageView, progressBar, resultContainer, resultTextView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
