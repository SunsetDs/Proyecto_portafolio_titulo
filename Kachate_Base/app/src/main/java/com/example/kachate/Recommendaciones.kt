package com.example.kachate

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.LinearLayout
import android.widget.TextView
import androidx.fragment.app.Fragment

// --- 1. Data Class para simular el Perfil del Usuario ---
// Normalmente esta data vendr√≠a de Firebase/Firestore o una API
data class UserProfile(
    val email: String,
    val dietType: String, // Ejemplo: "Vegano", "Keto", "Omn√≠voro"
    val allergies: String, // Ejemplo: "Gluten", "L√°cteos", "Ninguna"
    val isPregnant: Boolean
)

class Recommendaciones : Fragment() {

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        return inflater.inflate(R.layout.fragment_recommendations, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Simulaci√≥n: Cargar el perfil del usuario (Esto se reemplazar√≠a por una llamada real)
        val mockProfile = UserProfile(
            email = "ejemplo@usuario.com",
            dietType = "Vegano", // Cambia esto para probar: "Keto", "Vegetariano", "Omn√≠voro"
            allergies = "Gluten", // Cambia esto para probar: "L√°cteos", "Ninguna"
            isPregnant = false
        )

        // 1. Mostrar resumen del perfil en el UI
        val tvProfileSummary = view.findViewById<TextView>(R.id.tvProfileSummary)
        tvProfileSummary.text = "Perfil: ${mockProfile.dietType} | Alergias: ${mockProfile.allergies}"

        // 2. Generar y mostrar recomendaciones
        val recommendations = getRecommendations(mockProfile)
        displayRecommendations(view, recommendations)
    }

    /**
     * L√≥gica principal para generar recomendaciones basadas en el perfil.
     * Aqu√≠ es donde se aplica la inteligencia y las restricciones.
     */
    private fun getRecommendations(profile: UserProfile): List<String> {
        val list = mutableListOf<String>()

        // 1. Recomendaciones basadas en el TIPO DE DIETA
        when (profile.dietType) {
            "Vegano" -> {
                list.add("üçî Opci√≥n Principal: Hamburguesa de lentejas y champi√±ones con pan sin gluten.")
                list.add("ü•ó Almuerzo R√°pido: Ensalada de quinoa con garbanzos y aderezo de tahini.")
                list.add("üç∞ Postre Vegano: Mousse de chocolate y aguacate con bayas.")
            }
            "Keto" -> {
                list.add("ü•© Opci√≥n Principal: Salm√≥n al horno con esp√°rragos y mantequilla de ajo.")
                list.add("üç≥ Almuerzo R√°pido: Huevos revueltos con queso crema y aguacate.")
                list.add("ü•ú Snack Keto: Pu√±ado de nueces de macadamia y pecanas.")
            }
            "Vegetariano" -> {
                list.add("üçù Opci√≥n Principal: Pasta con pesto y tomates secos, coronada con queso parmesano.")
                list.add("üç≤ Almuerzo R√°pido: Sopa de calabaza y zanahoria con semillas de girasol.")
                list.add("ü•ö Prote√≠na: Omelette de espinacas y feta.")

            }
            else -> list.add("No se encontraron recomendaciones espec√≠ficas para este tipo de dieta.")
        }

        // 2. Ajustes basados en ALERGIAS
        if (profile.allergies == "Gluten") {
            // Aplicar restricci√≥n de gluten a todas las recomendaciones
            list.add(0, "üõë **ADVERTENCIA DE ALERGIA:** Aseg√∫rate de que todos los panes, pastas y salsas sean etiquetados como 'Sin Gluten' (Gluten-Free).")
            // Reemplazar la recomendaci√≥n principal si conten√≠a pan/pasta
            if (profile.dietType == "Vegano") {
                list[1] = "üçî Opci√≥n Principal (Ajustada): Hamburguesa de lentejas y champi√±ones servida en hoja de lechuga o con pan de ma√≠z."
            }
        } else if (profile.allergies == "L√°cteos") {
            list.add(0, "üõë **ADVERTENCIA DE ALERGIA:** Reemplaza el queso, mantequilla, y leche por alternativas vegetales (almendra, soja, coco).")
        }

        // 3. Ajustes por CONDICIONES ESPECIALES (Embarazo)
        if (profile.isPregnant) {
            list.add(0, "‚ú® **NOTA POR EMBARAZO:** Prioriza alimentos ricos en hierro (legumbres, carnes rojas magras), √°cido f√≥lico (hojas verdes) y calcio.")
        }

        return list
    }

    /**
     * Crea din√°micamente TextViews para mostrar la lista de recomendaciones.
     */
    private fun displayRecommendations(view: View, recommendations: List<String>) {
        val container = view.findViewById<LinearLayout>(R.id.recommendationsContainer)
        container.removeAllViews() // Limpiar vistas anteriores

        recommendations.forEach { recommendation ->
            val textView = TextView(context).apply {
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ).apply {
                    topMargin = 16 // Margen superior
                }
                text = recommendation
                textSize = 16f
                // Aplicar estilo basado en si es una advertencia
                if (recommendation.contains("ADVERTENCIA") || recommendation.contains("NOTA")) {
                    setTextColor(resources.getColor(R.color.purple_500, null)) // Usar el morado para avisos importantes
                    setTypeface(null, android.graphics.Typeface.BOLD)
                } else {
                    setTextColor(resources.getColor(android.R.color.black, null))
                }
            }
            container.addView(textView)
        }
    }
}
